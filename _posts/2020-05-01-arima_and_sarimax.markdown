---
layout: post
title:      "ARIMA and SARIMAX"
date:       2020-05-01 17:05:58 +0000
permalink:  arima_and_sarimax
---


Time series analysis is a great tool for predicting future events such as market values changing. ARIMA and SARIMA are great tools for time series analysis. They require data in a ‘long’ format. By this I mean a collection (preferably a pandas data-frame) of data points where each data point is associated with a time (in pandas this would be a series with different times forming the index). ARIMA stands for auto regressive integrated moving average. SARIMAX is similar and stands for seasonal auto regressive integrated moving average with exogenous factors. In this blog post I will break down how these techniques work as well as an easy way to use them in python. Also I will show how to use AIC (Akaike information criterion) to evaluate models.
To begin I will explain what auto regressive means. In an auto regressive (AR) model the model predicts the next data point by looking at previous data points and using a mathematical formula similar to linear regression. There is something called an order (represented by “p”) that determines how many previous data points will be used. In my opinion the best way to get a good p value is to just try a few different values and see which model came out with the minimum (best) AIC. When the p value is higher the model takes into account more data points that occurred a longer time ago. Below is the formula for an auto regressive model.¹ The “c” is a constant and the “e” stands for error or noise.¹

Next up is to explain the integrated part of ARIMA and SARIMAX. For the auto regressive and moving average models to work the data must be stationary. This means the data needs to not have trends or seasonality. Integration is taking a difference of the time-series, subtracting the previous value from each value, which tends to make the data more stationary. There is a value called “d” which represents how many times the data is to be differenced. Like the p value in the auto regressive model, it is best to simply try out a few different values for d and see which model has the minimal AIC.
Now I will explain the moving average part of ARIMA and SARIMAX. A moving average (MA) model performs calculations based on noise in the data along with the data’s slope. The formula for an MA model can be found below.² The “µ” represents the mean of X and the “Θ” represents the parameters of the model.²

Combining AR and MA along with differencing (I) creates the ARIMA model. There is a value called “q” in the moving average model that is the order. The order is similar to the auto regressive order where it is the amount of past data points to put into the equation.
SARIMAX is used on data sets that have seasonal cycles. The difference between ARIMA and SARIMAX is the seasonality and exogenous factors (seasonality and regular ARIMA don’t mix well). These are a bit complicated, but the key take away is that SARIMAX requires not only the p, d, and q arguments that ARIMA requires, but it also requires another set of p, d, and q arguments for the seasonality aspect as well as an argument called “s” which is the periodicity of the data’s seasonal cycle. When choosing an s value try to get an idea of when the seasonal data cycles. If your data points are separated by a monthly basis and the seasonal cycle is a year, then set s to 12. Or if the data points are separated by a daily basis and the seasonal cycle is a week then make s equal to 7.
For all the values other than SARIMAX’s “s” value I recommend using a grid search this can be used with the itertools library in python. I will start off by explaining what the grid search would resemble for an ARIMA model. Grid searching is essentially running multiple models with different parameters as a way of checking which parameter combination is the best. In python First create a list and a dictionary. The dictionary will store AIC values from the models as keys and have the order of the models as values. The list will simply be a list of AIC values that will be obtained by running the different models. Create three variables named p, d, and q and set them to a range between say 0 and 2. Then use itertools’ product method to find all possible combinations of p’s, d’s, and q’s and set that to a variable. Then use a for loop when calling the ARIMA method to iterate through each combination of p’s, d’s, and q’s. Find the models AIC and append it to the list of AIC’s and update the dictionary with each models AIC and the set of parameters used. Finally find the minimum value in the list of AICs and then find that key in the dictionary. The resulting key will be the optimal order to create a model with.
To run an ARIMA model there are two arguments: the actual data and the order. The order is a tuple containing p, d, and q. To run the model simply create an ARIMA object instance from the class in statsmodels.tsa.arima_model. Set the arguments (data and order) upon instantiating and then fit the model by calling “.fit()” do this for every combination of arguments and save the AIC in the lists and dictionaries mentioned above. To find the model’s AIC simply take the instance variable of the model and call “.aic” to return the AIC. 

SARIMAX is much like ARIMA, but a little more complicated. Not only do you have to use a loop and grid search for the optimal values of p, d, and q, but you have to also use a nested loop and grid search for the seasonal values for p, d, and q. There are also many more parameters in the SARIMAX function. 

Once these models are made it is time for forecasting. Forecasting can be done by calling “.forcast(X)” where X is the amount of time intervals you want to forecast. All in all these models are highly effective at conducting time series analysis and are an important tool in any data scientist’s tool box.
